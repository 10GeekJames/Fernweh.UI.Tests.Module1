// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Fernweh.UITests._Features.ThePublicLibrary.BookDetail
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "smoke")]
    [Xunit.TraitAttribute("Category", "thepubliclibrary")]
    [Xunit.TraitAttribute("Category", "book")]
    [Xunit.TraitAttribute("Category", "bookdetail")]
    public partial class DeleteMe01StBookDetailBadWayToThingsTooImparativeSeekDeclarativeFeature : object, Xunit.IClassFixture<DeleteMe01StBookDetailBadWayToThingsTooImparativeSeekDeclarativeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "smoke",
                "thepubliclibrary",
                "book",
                "bookdetail"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "DeleteMe01stBookDetailBadWayToThingsTooImparativeSeekDeclarative.Feature"
#line hidden
        
        public DeleteMe01StBookDetailBadWayToThingsTooImparativeSeekDeclarativeFeature(DeleteMe01StBookDetailBadWayToThingsTooImparativeSeekDeclarativeFeature.FixtureData fixtureData, Fernweh_UITests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "_Features/ThePublicLibrary/BookDetail", "DeleteMe01stBookDetailBadWayToThingsTooImparativeSeekDeclarative", "    As a guest user\r\n    I want to be able to see the books detail\r\n    So that I" +
                    " can find out more about the book", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="I see the book details using inline table data with feature file providing qualit" +
            "y check logic")]
        [Xunit.TraitAttribute("FeatureTitle", "DeleteMe01stBookDetailBadWayToThingsTooImparativeSeekDeclarative")]
        [Xunit.TraitAttribute("Description", "I see the book details using inline table data with feature file providing qualit" +
            "y check logic")]
        [Xunit.TraitAttribute("Category", "longwinded")]
        [Xunit.InlineDataAttribute("978-0-00-000000-6", "The Wild Side", "John Writer", "", "", "2", "2", "1982", new string[0])]
        [Xunit.InlineDataAttribute("978-5-00-000001-1", "Book Many Copies", "Sally Typer", "", "", "7", "7", "1981", new string[0])]
        public void ISeeTheBookDetailsUsingInlineTableDataWithFeatureFileProvidingQualityCheckLogic(string isbn, string title, string author, string categories, string description, string copiesTotal, string copiesAvailable, string publishYear, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "longwinded"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("isbn", isbn);
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("author", author);
            argumentsOfScenario.Add("categories", categories);
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("copies total", copiesTotal);
            argumentsOfScenario.Add("copies available", copiesAvailable);
            argumentsOfScenario.Add("publish year", publishYear);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I see the book details using inline table data with feature file providing qualit" +
                    "y check logic", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
        testRunner.Given(string.Format("I navigate to book by isbn \"{0}\"", isbn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
        testRunner.Then(string.Format("I see the book details isbn is \"{0}\"", isbn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
        testRunner.And(string.Format("I see the book details title is \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
        testRunner.And(string.Format("I see the book details author is \"{0}\"", author), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
        testRunner.And(string.Format("I see the book details categories is \"{0}\"", categories), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
        testRunner.And(string.Format("I see the book details description is \"{0}\"", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
        testRunner.And(string.Format("I see the book details copies total is \"{0}\"", copiesTotal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
        testRunner.And(string.Format("I see the book details copies available is \"{0}\"", copiesAvailable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
        testRunner.And(string.Format("I see the book details publish year is \"{0}\"", publishYear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DeleteMe01StBookDetailBadWayToThingsTooImparativeSeekDeclarativeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DeleteMe01StBookDetailBadWayToThingsTooImparativeSeekDeclarativeFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
